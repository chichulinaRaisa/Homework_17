package homework;

import java.util.List;

public interface SearchTree<T> {
    T find(T element);
    List<T> getSortedList();
}

package homework;

import java.util.List;
import java.util.ArrayList;

public class HM<T extends Comparable<T>> implements SearchTree<T> {

    private static class TreeNode<T> {
        T value;
        TreeNode<T> left, right;

        TreeNode(T value) {
            this.value = value;
        }
    }

    private TreeNode<T> root;

    public HM(List<T> sortedList) {
        root = buildTree(sortedList, 0, sortedList.size() - 1);
    }

    private TreeNode<T> buildTree(List<T> list, int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        return new TreeNode<>(list.get(mid)) {{
            left = buildTree(list, start, mid - 1);
            right = buildTree(list, mid + 1, end);
        }};
    }

    @Override
    public T find(T element) {
        TreeNode<T> node = root;
        while (node != null) {
            int cmp = element.compareTo(node.value);
            if (cmp == 0) return node.value;
            node = (cmp < 0) ? node.left : node.right;
        }
        return null;
    }

    @Override
    public List<T> getSortedList() {
        List<T> sortedList = new ArrayList<>();
        inorderTraversal(root, sortedList);
        return sortedList;
    }

    private void inorderTraversal(TreeNode<T> node, List<T> list) {
        if (node == null) return;
        inorderTraversal(node.left, list);
        list.add(node.value);
        inorderTraversal(node.right, list);
    }

    public static void main(String[] args) {
        HM<Integer> tree = new HM<>(List.of(1, 2, 3, 4, 5, 6, 7));
        System.out.println(tree.find(4));
        System.out.println(tree.getSortedList());
    }
}
